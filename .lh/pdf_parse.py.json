{
    "sourceFile": "pdf_parse.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 54,
            "patches": [
                {
                    "date": 1739647115782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739647137803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,11 @@\n \n def extract_text_from_pdf(pdf_path):\n     pdf_text = \"\"\n     with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfFileReader(file)\n-        for page_num in range(reader.numPages):\n-            page = reader.getPage(page_num)\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n             pdf_text += page.extract_text()\n     return pdf_text\n \n def query_openai(prompt):\n"
                },
                {
                    "date": 1739647214983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return pdf_text\n \n def query_openai(prompt):\n     response = openai.Completion.create(\n-        engine=\"gpt-4o\",\n+        engine=\"gpt-4\",\n         prompt=prompt,\n         max_tokens=250\n     )\n     return response.choices[0].text.strip()\n"
                },
                {
                    "date": 1739647235933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=250\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def main():\n+    pdf_path = '267_syllabus.pdf'\n+    pdf_text = extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739647280557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,50 +13,8 @@\n             pdf_text += page.extract_text()\n     return pdf_text\n \n def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=250\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def main():\n-    pdf_path = '267_syllabus.pdf'\n-    pdf_text = extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    main()\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n     response = openai.Completion.create(\n         engine=\"gpt-4\",\n         prompt=prompt,\n         max_tokens=250\n"
                },
                {
                    "date": 1739647289667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,17 @@\n             pdf_text += page.extract_text()\n     return pdf_text\n \n def query_openai(prompt):\n-    response = openai.Completion.create(\n-        engine=\"gpt-4\",\n-        prompt=prompt,\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n         max_tokens=250\n     )\n-    return response.choices[0].text.strip()\n+    return response.choices[0].message['content'].strip()\n \n def main():\n     pdf_path = '267_syllabus.pdf'\n     pdf_text = extract_text_from_pdf(pdf_path)\n"
                },
                {
                    "date": 1739647329288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return pdf_text\n \n def query_openai(prompt):\n     response = openai.ChatCompletion.create(\n-        model=\"gpt-4\",\n+        model=\"gpt-4o\",\n         messages=[\n             {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n             {\"role\": \"user\", \"content\": prompt}\n         ],\n"
                },
                {
                    "date": 1739647565808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,25 @@\n     query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n     1. Lecture time and location(class schedule)\n     2. Instructor's name and email\n     3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\"\"\"\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]\n+     \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment1 -3.33\n+     element2: assignment2 -3.33\n+     element3: assignment3 -3.33\n+     element4: assignment4 -0\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n"
                },
                {
                    "date": 1739647712755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,11 @@\n      element[no]: [name] -[percentage]\n      \n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment1 -3.33\n-     element2: assignment2 -3.33\n-     element3: assignment3 -3.33\n+     element1: assignment1 -[10/3]\n+     element2: assignment2 -[10/3]\n+     element3: assignment3 -[10/3]\n      element4: assignment4 -0\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n"
                },
                {
                    "date": 1739647751723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n      element[no]: [name] -[percentage]\n      \n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment1 -[10/3]\n-     element2: assignment2 -[10/3]\n-     element3: assignment3 -[10/3]\n-     element4: assignment4 -0\"\"\"\n+     element1: assignment 1 -[10/3]-\n+     element2: assignment 2 -[10/3]-\n+     element3: assignment 3 -[10/3]-\n+     element4: assignment4 -[0]-\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n"
                },
                {
                    "date": 1739647777579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,10 @@\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n      element1: assignment 1 -[10/3]-\n      element2: assignment 2 -[10/3]-\n      element3: assignment 3 -[10/3]-\n-     element4: assignment4 -[0]-\"\"\"\n+     element4: assignment4 -[0]-\n+     Keep in fractions for accurate representation.\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n"
                },
                {
                    "date": 1739647798956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,11 @@\n      element[no]: [name] -[percentage]\n      \n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[10/3]-\n-     element2: assignment 2 -[10/3]-\n-     element3: assignment 3 -[10/3]-\n+     element1: assignment 1 -[3.33]-\n+     element2: assignment 2 -[3.33]-\n+     element3: assignment 3 -[3.33]-\n      element4: assignment4 -[0]-\n      Keep in fractions for accurate representation.\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n"
                },
                {
                    "date": 1739647904806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     )\n     return response.choices[0].message['content'].strip()\n \n def main():\n-    pdf_path = '267_syllabus.pdf'\n+    pdf_path = '225_syllabus.pdf'\n     pdf_text = extract_text_from_pdf(pdf_path)\n     \n     query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n     1. Lecture time and location(class schedule)\n"
                },
                {
                    "date": 1739647930333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def main():\n+    pdf_path = '225_syllabus.pdf'\n+    pdf_text = extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]\n+     \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment 1 -[3.33]-\n+     element2: assignment 2 -[3.33]-\n+     element3: assignment 3 -[3.33]-\n+     element4: assignment4 -[0]-\n+     Keep in fractions for accurate representation.\"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739647984934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def main():\n+    pdf_path = '225_syllabus.pdf'\n+    pdf_text = extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]\n+     \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment 1 -[3.33]-\n+     element2: assignment 2 -[3.33]-\n+     element3: assignment 3 -[3.33]-\n+     element4: assignment4 -[0]-\n+     Keep in fractions for accurate representation.\"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739648020482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def main():\n+    pdf_path = '225_syllabus.pdf'\n+    pdf_text = extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]\n+     \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment 1 -[3.33]-\n+     element2: assignment 2 -[3.33]-\n+     element3: assignment 3 -[3.33]-\n+     element4: assignment4 -[0]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739648446812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,71 +23,12 @@\n         max_tokens=1000\n     )\n     return response.choices[0].message['content'].strip()\n \n-def main():\n-    pdf_path = '225_syllabus.pdf'\n-    pdf_text = extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]\n-     \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]-\n-     element2: assignment 2 -[3.33]-\n-     element3: assignment 3 -[3.33]-\n-     element4: assignment4 -[0]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    main()\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n+def course_info(pdf_paths: list):\n     pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def main():\n-    pdf_path = '225_syllabus.pdf'\n-    pdf_text = extract_text_from_pdf(pdf_path)\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n     \n     query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n     1. Lecture time and location(class schedule)\n     2. Instructor's name and email\n@@ -100,138 +41,21 @@\n      111-LectureLocation: [Building, Room] -111\n      222-InstructorName: [First Last] -222\n      222-InstructorEmail: [email] -222\n      333-Weightage table-333\n-     element[no]: [name] -[percentage]\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-\n      \n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]-\n-     element2: assignment 2 -[3.33]-\n-     element3: assignment 3 -[3.33]-\n-     element4: assignment4 -[0]-\n-     Keep in fractions for accurate representation.\"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    main()\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def main():\n-    pdf_path = '225_syllabus.pdf'\n-    pdf_text = extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n      333-Weightage table-333\n-     element[no]: [name] -[percentage]\n-     \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]-\n-     element2: assignment 2 -[3.33]-\n-     element3: assignment 3 -[3.33]-\n-     element4: assignment4 -[0]-\n      Keep in fractions for accurate representation.\"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n-    main()\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=250\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def main():\n-    pdf_path = '225_syllabus.pdf'\n-    pdf_text = extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]\n-     \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]-\n-     element2: assignment 2 -[3.33]-\n-     element3: assignment 3 -[3.33]-\n-     element4: assignment4 -[0]-\n-     Keep in fractions for accurate representation.\"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739648508233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,5 +57,6 @@\n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n-    main()\n\\ No newline at end of file\n+    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739648586383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,29 +34,33 @@\n     2. Instructor's name and email\n     3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n     # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n     # \n+\n      The format should be like this:\n      111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n      111-LectureTime: [HH:MM-HH:MM] -111\n      111-LectureLocation: [Building, Room] -111\n      222-InstructorName: [First Last] -222\n      222-InstructorEmail: [email] -222\n      333-Weightage table-333\n      element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-\n-     \n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as:\n      element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n      element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n      element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n      element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n      333-Weightage table-333\n-     Keep in fractions for accurate representation.\"\"\"\n+     Keep in fractions for accurate representation.\n+     \"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n\\ No newline at end of file\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n     course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n-    \n"
                },
                {
                    "date": 1739648632002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,5 +62,5 @@\n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n-    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n\\ No newline at end of file\n+    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n"
                },
                {
                    "date": 1739648690146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n      111-LectureLocation: [Building, Room] -111\n      222-InstructorName: [First Last] -222\n      222-InstructorEmail: [email] -222\n      333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for assignments not yet decided\n      If there are multiple sections, write them separately entirely with a seperator like:\n      ### START OF SECTION [] ###\n      DATA\n         ### END OF SECTION [] ###\n"
                },
                {
                    "date": 1739648701460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n"
                },
                {
                    "date": 1739648714176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,70 +63,4 @@\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n     course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for assignments not yet decided\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n"
                },
                {
                    "date": 1739649002298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    course_info([\"229_outline.pdf\"])\n"
                },
                {
                    "date": 1739649096121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n      ### START OF SECTION [] ###\n      DATA\n         ### END OF SECTION [] ###\n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any)\n      element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n      element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n      element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n      element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n@@ -63,70 +63,4 @@\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n     course_info([\"229_outline.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as:\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    course_info([\"225_syllabus.pdf\", \"225_duedates.pdf\"])\n"
                },
                {
                    "date": 1739649137181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739649205619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739649473919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,144 +55,13 @@\n      element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n      element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n      333-Weightage table-333\n      Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n      \"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-if __name__ == \"__main__\":\n-    course_info([\"229_outline.pdf\"])\n"
                },
                {
                    "date": 1739649533059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(\"Response from OpenAI:\", response)\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739649811962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,73 +62,20 @@\n     \n     response = query_openai(prompt)\n     print(\"Response from OpenAI:\", response)\n \n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"]-111\")[0].strip()\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n \n-openai.api_key = os.getenv('OPENAI_API_KEY')\n \n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650012308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,38 @@\n         if not section:\n             continue\n         section_name = section.split(\"]\")[0].strip('[')\n         course_info[section_name] = {}\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"]-111\")[0].strip()\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n         for d in lecture_date:\n             course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n \n+    return course_info\n \n+\n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650023575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650154622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n         if not section:\n             continue\n         section_name = section.split(\"]\")[0].strip('[')\n         course_info[section_name] = {}\n+        print(section)\n         lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n         dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n         for d in lecture_date:\n             course_info[section_name][\"LectureDays\"] = dayname[d]\n@@ -105,112 +106,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(\"Response from OpenAI:\", response)\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650184770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")\n+    course_info = {}\n+    for section in sections:\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650201970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650245043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,10 @@\n      \"\"\"\n     prompt = f\"{pdf_text}\\n\\n{query}\"\n     \n     response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n     print(parse_course_results(response))\n \n def parse_course_results(response):\n     sections = response.split(\"### START OF SECTION\")\n@@ -106,219 +108,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")\n-    course_info = {}\n-    for section in sections:\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650257923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION [] ###\n+     DATA\n+        ### END OF SECTION [] ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650283383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,116 +105,7 @@\n     return course_info\n \n \n if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n+    with open('response.txt', 'r') as file:\n+        response = file.read()\n     print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650309413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     response = query_openai(prompt)\n     print(parse_course_results(response))\n \n def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")\n+    sections = response.split(\"### START OF SECTION\")[1:]\n     course_info = {}\n     for section in sections:\n         section = section.strip()\n         if not section:\n"
                },
                {
                    "date": 1739650360789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *name* ###\n+     DATA\n+        ### END OF SECTION *name* ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"]\")[0].strip('[')\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    with open('response.txt', 'r') as file:\n+        response = file.read()\n+    print(parse_course_results(response))\n"
                },
                {
                    "date": 1739650383503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *name* ###\n+     DATA\n+        ### END OF SECTION *name* ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"*\")[1].strip('*')\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    with open('response.txt', 'r') as file:\n+        response = file.read()\n+    print(parse_course_results(response))\n"
                },
                {
                    "date": 1739650396146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *name* ###\n+     DATA\n+        ### END OF SECTION *name* ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"*\")[1]\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    with open('response.txt', 'r') as file:\n+        response = file.read()\n+    print(parse_course_results(response))\n"
                },
                {
                    "date": 1739650419084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *name* ###\n+     DATA\n+        ### END OF SECTION *name* ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"*\")[1]\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650443975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *name* ###\n+     DATA\n+        ### END OF SECTION *name* ###\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"*\")[1]\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650481086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *code* ###\n+     DATA\n+        ### END OF SECTION *code* ###  (keep the *, makes it easy to find data)\n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"*\")[1]\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n+            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n+            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650531646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n      element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n      If there are multiple sections, write them separately entirely with a seperator like:\n      ### START OF SECTION *code* ###\n      DATA\n-        ### END OF SECTION *code* ###  (keep the *, makes it easy to find data)\n+        ### END OF SECTION *code* ###  \n      If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n      For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n      element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n      element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n@@ -108,668 +108,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *name* ###\n-     DATA\n-        ### END OF SECTION *name* ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"*\")[1]\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *name* ###\n-     DATA\n-        ### END OF SECTION *name* ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"*\")[1]\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *name* ###\n-     DATA\n-        ### END OF SECTION *name* ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"*\")[1]\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    with open('response.txt', 'r') as file:\n-        response = file.read()\n-    print(parse_course_results(response))\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *name* ###\n-     DATA\n-        ### END OF SECTION *name* ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"*\")[1].strip('*')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    with open('response.txt', 'r') as file:\n-        response = file.read()\n-    print(parse_course_results(response))\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *name* ###\n-     DATA\n-        ### END OF SECTION *name* ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    with open('response.txt', 'r') as file:\n-        response = file.read()\n-    print(parse_course_results(response))\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION [] ###\n-     DATA\n-        ### END OF SECTION [] ###\n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"]\")[0].strip('[')\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    with open('response.txt', 'r') as file:\n-        response = file.read()\n-    print(parse_course_results(response))\n"
                },
                {
                    "date": 1739650596851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     for section in sections:\n         section = section.strip()\n         if not section:\n             continue\n-        section_name = section.split(\"*\")[1]\n+        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n         course_info[section_name] = {}\n         print(section)\n         lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n         dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n"
                },
                {
                    "date": 1739650685317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *code* ###\n+     DATA\n+        ### END OF SECTION *code* ###  \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"] = dayname[d]\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element.replace(\"[\", \"\").replace(\"]\", \"\")\n+            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n+            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n+            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650730053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,11 @@\n         course_info[section_name] = {}\n         print(section)\n         lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n         dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        course_info[section_name][\"LectureDays\"] = []\n         for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n+            course_info[section_name][\"LectureDays\"].append(dayname[d])\n         lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n         course_info[section_name][\"LectureTime\"] = lecture_time\n         lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n         course_info[section_name][\"LectureLocation\"] = lecture_location\n@@ -109,115 +110,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"301_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *code* ###\n-     DATA\n-        ### END OF SECTION *code* ###  \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"] = dayname[d]\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element_name = element.split(\": \")[1].split(\" -[\")[0].strip()\n-            element_weight = element.split(\"-[\")[1].split(\"]-\")[0].strip()\n-            element_due_date = element.split(\"DUE [\")[1].split(\"] TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME [\")[1].split(\"]-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650766100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         for element in weightage_table:\n             element = element.strip()\n             if not element:\n                 continue\n-            element.replace(\"[\", \"\").replace(\"]\", \"\")\n+            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n             element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n             element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n             element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n             element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n"
                },
                {
                    "date": 1739650857324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *code* ###\n+     DATA\n+        ### END OF SECTION *code* ###  \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n+        course_info[section_name] = {}\n+        print(section)\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        course_info[section_name][\"LectureDays\"] = []\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"].append(dayname[d])\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n+            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n+            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n+            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"365_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650870900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,117 +110,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"365_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *code* ###\n-     DATA\n-        ### END OF SECTION *code* ###  \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        course_info[section_name][\"LectureDays\"] = []\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"].append(dayname[d])\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n-            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n-            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n-            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"301_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650877055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *code* ###\n+     DATA\n+        ### END OF SECTION *code* ###  \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n+        course_info[section_name] = {}\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        course_info[section_name][\"LectureDays\"] = []\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"].append(dayname[d])\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n+            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n+            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n+            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"365_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739650952879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import openai\n+import PyPDF2\n+import os\n+\n+openai.api_key = os.getenv('OPENAI_API_KEY')\n+\n+def extract_text_from_pdf(pdf_path):\n+    pdf_text = \"\"\n+    with open(pdf_path, 'rb') as file:\n+        reader = PyPDF2.PdfReader(file)\n+        for page_num in range(len(reader.pages)):\n+            page = reader.pages[page_num]\n+            pdf_text += page.extract_text()\n+    return pdf_text\n+\n+def query_openai(prompt):\n+    response = openai.ChatCompletion.create(\n+        model=\"gpt-4o\",\n+        messages=[\n+            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n+            {\"role\": \"user\", \"content\": prompt}\n+        ],\n+        max_tokens=1000\n+    )\n+    return response.choices[0].message['content'].strip()\n+\n+def course_info(pdf_paths: list):\n+    pdf_text = \"\"\n+    for pdf_path in pdf_paths:\n+        pdf_text += extract_text_from_pdf(pdf_path)\n+    \n+    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n+    1. Lecture time and location(class schedule)\n+    2. Instructor's name and email\n+    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n+    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n+    # \n+\n+     The format should be like this:\n+     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n+     111-LectureTime: [HH:MM-HH:MM] -111\n+     111-LectureLocation: [Building, Room] -111\n+     222-InstructorName: [First Last] -222\n+     222-InstructorEmail: [email] -222\n+     333-Weightage table-333\n+     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE [TBD] for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write [TBD], THE SQUARE BRACKETS ARE MANDATORY)\n+     If there are multiple sections, write them separately entirely with a seperator like:\n+     ### START OF SECTION *code* ###\n+     DATA\n+        ### END OF SECTION *code* ###  \n+     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n+     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n+     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n+     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n+     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n+     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n+     333-Weightage table-333\n+     Keep in fractions for accurate representation.\n+     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n+     \"\"\"\n+    prompt = f\"{pdf_text}\\n\\n{query}\"\n+    \n+    response = query_openai(prompt)\n+    with open(\"response.txt\", \"w\") as file:\n+        file.write(response)\n+    print(parse_course_results(response))\n+\n+def parse_course_results(response):\n+    sections = response.split(\"### START OF SECTION\")[1:]\n+    course_info = {}\n+    for section in sections:\n+        section = section.strip()\n+        if not section:\n+            continue\n+        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n+        course_info[section_name] = {}\n+        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n+        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n+        course_info[section_name][\"LectureDays\"] = []\n+        for d in lecture_date:\n+            course_info[section_name][\"LectureDays\"].append(dayname[d])\n+        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureTime\"] = lecture_time\n+        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n+        course_info[section_name][\"LectureLocation\"] = lecture_location\n+        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorName\"] = instructor_name\n+        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n+        course_info[section_name][\"InstructorEmail\"] = instructor_email\n+        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n+        weightage_table = weightage_table.split(\"\\n\")\n+        course_info[section_name][\"WeightageTable\"] = {}\n+        for element in weightage_table:\n+            element = element.strip()\n+            if not element:\n+                continue\n+            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n+            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n+            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n+            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n+            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n+            course_info[section_name][\"WeightageTable\"][element_name] = {\n+                \"Weight\": element_weight,\n+                \"DueDate\": element_due_date,\n+                \"DueTime\": element_due_time\n+            }\n+\n+    return course_info\n+\n+\n+if __name__ == \"__main__\":\n+    course_info([\"365_syllabus.pdf\"])\n"
                },
                {
                    "date": 1739651132592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,229 +109,4 @@\n \n \n if __name__ == \"__main__\":\n     course_info([\"365_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *code* ###\n-     DATA\n-        ### END OF SECTION *code* ###  \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n-        course_info[section_name] = {}\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        course_info[section_name][\"LectureDays\"] = []\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"].append(dayname[d])\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n-            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n-            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n-            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"365_syllabus.pdf\"])\n-import openai\n-import PyPDF2\n-import os\n-\n-openai.api_key = os.getenv('OPENAI_API_KEY')\n-\n-def extract_text_from_pdf(pdf_path):\n-    pdf_text = \"\"\n-    with open(pdf_path, 'rb') as file:\n-        reader = PyPDF2.PdfReader(file)\n-        for page_num in range(len(reader.pages)):\n-            page = reader.pages[page_num]\n-            pdf_text += page.extract_text()\n-    return pdf_text\n-\n-def query_openai(prompt):\n-    response = openai.ChatCompletion.create(\n-        model=\"gpt-4o\",\n-        messages=[\n-            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n-            {\"role\": \"user\", \"content\": prompt}\n-        ],\n-        max_tokens=1000\n-    )\n-    return response.choices[0].message['content'].strip()\n-\n-def course_info(pdf_paths: list):\n-    pdf_text = \"\"\n-    for pdf_path in pdf_paths:\n-        pdf_text += extract_text_from_pdf(pdf_path)\n-    \n-    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n-    1. Lecture time and location(class schedule)\n-    2. Instructor's name and email\n-    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n-    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\n-    # \n-\n-     The format should be like this:\n-     111-LectureDays: [MTWRF] -111    ## Keep the format in single alphabet for each day, use R for Thursday\n-     111-LectureTime: [HH:MM-HH:MM] -111\n-     111-LectureLocation: [Building, Room] -111\n-     222-InstructorName: [First Last] -222\n-     222-InstructorEmail: [email] -222\n-     333-Weightage table-333\n-     element[no]: [name] -[percentage]- -DUE [MM/DD/YY] TIME [HH:MM]-     #ELSE TBD for any information not accessible #the format is strict and cannot be changed(for date, and time, if not available in that frmat, just write TBD)\n-     If there are multiple sections, write them separately entirely with a seperator like:\n-     ### START OF SECTION *code* ###\n-     DATA\n-        ### END OF SECTION *code* ###  \n-     If there is something like best 7 of 8, assign the percentage to the first 7 and write the 8th with zero percent weightage.\n-     For example a best 3 out of 4 assignments for 10 percent should be written as: (remove any percentage sign if any and keep all square brackets wherever shown)\n-     element1: assignment 1 -[3.33]- -DUE [02/12/25] TIME [23:59]-\n-     element2: assignment 2 -[3.33]- -DUE [02/19/25] TIME [23:59]-\n-     element3: assignment 3 -[3.33]- -DUE [02/26/25] TIME [23:59]-\n-     element4: assignment4 -[0]- -DUE [03/05/25] TIME [23:59]-\n-     333-Weightage table-333\n-     Keep in fractions for accurate representation.\n-     FOR ELEMENTS WITH information like due mondays at 6 pm, make them also seperately like elemetn1, 2 and so on, try to find information regarding how many elements there are in other parts of the pdf.\n-     \"\"\"\n-    prompt = f\"{pdf_text}\\n\\n{query}\"\n-    \n-    response = query_openai(prompt)\n-    with open(\"response.txt\", \"w\") as file:\n-        file.write(response)\n-    print(parse_course_results(response))\n-\n-def parse_course_results(response):\n-    sections = response.split(\"### START OF SECTION\")[1:]\n-    course_info = {}\n-    for section in sections:\n-        section = section.strip()\n-        if not section:\n-            continue\n-        section_name = section.split(\"###\")[0].replace(\" \", \"\").replace(\"*\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").strip()\n-        course_info[section_name] = {}\n-        print(section)\n-        lecture_date= section.split(\"111-LectureDays: [\")[1].split(\"] -111\")[0].strip()\n-        dayname = {\"M\":\"Monday\", \"T\":\"Tuesday\", \"W\":\"Wednesday\", \"R\":\"Thursday\", \"F\":\"Friday\"}\n-        course_info[section_name][\"LectureDays\"] = []\n-        for d in lecture_date:\n-            course_info[section_name][\"LectureDays\"].append(dayname[d])\n-        lecture_time = section.split(\"111-LectureTime: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureTime\"] = lecture_time\n-        lecture_location = section.split(\"111-LectureLocation: [\")[1].split(\"] -111\")[0].strip()\n-        course_info[section_name][\"LectureLocation\"] = lecture_location\n-        instructor_name = section.split(\"222-InstructorName: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorName\"] = instructor_name\n-        instructor_email = section.split(\"222-InstructorEmail: [\")[1].split(\"] -222\")[0].strip()\n-        course_info[section_name][\"InstructorEmail\"] = instructor_email\n-        weightage_table = section.split(\"333-Weightage table-333\")[1].split('333-Weightage table-333')[0].strip()\n-        weightage_table = weightage_table.split(\"\\n\")\n-        course_info[section_name][\"WeightageTable\"] = {}\n-        for element in weightage_table:\n-            element = element.strip()\n-            if not element:\n-                continue\n-            element = element.replace(\"[\", \"\").replace(\"]\", \"\")\n-            element_name = element.split(\": \")[1].split(\" -\")[0].strip()\n-            element_weight = element.split(\"-\")[1].split(\"-\")[0].strip()\n-            element_due_date = element.split(\"DUE \")[1].split(\" TIME\")[0].strip()\n-            element_due_time = element.split(\"TIME \")[1].split(\"-\")[0].strip()\n-            course_info[section_name][\"WeightageTable\"][element_name] = {\n-                \"Weight\": element_weight,\n-                \"DueDate\": element_due_date,\n-                \"DueTime\": element_due_time\n-            }\n-\n-    return course_info\n-\n-\n-if __name__ == \"__main__\":\n-    course_info([\"365_syllabus.pdf\"])\n"
                }
            ],
            "date": 1739647115782,
            "name": "Commit-0",
            "content": "import openai\nimport PyPDF2\nimport os\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n\ndef extract_text_from_pdf(pdf_path):\n    pdf_text = \"\"\n    with open(pdf_path, 'rb') as file:\n        reader = PyPDF2.PdfFileReader(file)\n        for page_num in range(reader.numPages):\n            page = reader.getPage(page_num)\n            pdf_text += page.extract_text()\n    return pdf_text\n\ndef query_openai(prompt):\n    response = openai.Completion.create(\n        engine=\"gpt-4o\",\n        prompt=prompt,\n        max_tokens=250\n    )\n    return response.choices[0].text.strip()\n\ndef main():\n    pdf_path = '267_syllabus.pdf'\n    pdf_text = extract_text_from_pdf(pdf_path)\n    \n    query = \"\"\"Here is a pdf about the syllabus for a course. Can you summarize it for me? I need you to identify the following information:\n    1. Lecture time and location(class schedule)\n    2. Instructor's name and email\n    3. A table of weightage for assignments, quizzes, and exams(should be python parasable for easy information retrieval.)\n    # If there are multiple assignments (like 5 assignment for total 40%, you should write each sepearately like assignment 1 = 8%)\"\"\"\n    prompt = f\"{pdf_text}\\n\\n{query}\"\n    \n    response = query_openai(prompt)\n    print(\"Response from OpenAI:\", response)\n\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}